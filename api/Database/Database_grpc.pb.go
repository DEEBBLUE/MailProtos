// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: Database.proto

package Database

import (
	context "context"
	Req "github.com/DEEBBLUE/MailProtos/api/Req"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Database_CreateUser_FullMethodName         = "/database.Database/CreateUser"
	Database_RepeateUser_FullMethodName        = "/database.Database/RepeateUser"
	Database_DeleteUser_FullMethodName         = "/database.Database/DeleteUser"
	Database_UpdateUserPassword_FullMethodName = "/database.Database/UpdateUserPassword"
	Database_UpdateUserName_FullMethodName     = "/database.Database/UpdateUserName"
	Database_CreateMessage_FullMethodName      = "/database.Database/CreateMessage"
	Database_RepeateMessage_FullMethodName     = "/database.Database/RepeateMessage"
)

// DatabaseClient is the client API for Database service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseClient interface {
	// User
	CreateUser(ctx context.Context, in *Req.CreateUserReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	RepeateUser(ctx context.Context, in *Req.RepeateUserReq, opts ...grpc.CallOption) (*Req.RepeateUserRes, error)
	DeleteUser(ctx context.Context, in *Req.DeleteUserReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	UpdateUserPassword(ctx context.Context, in *Req.UpdateUserPasswordReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	UpdateUserName(ctx context.Context, in *Req.UpdateUserNameReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	// Messages
	CreateMessage(ctx context.Context, in *Req.CreateMessageReq, opts ...grpc.CallOption) (*Req.DefaultRes, error)
	RepeateMessage(ctx context.Context, in *Req.RepeateMessageReq, opts ...grpc.CallOption) (*Req.RepeateMessageRes, error)
}

type databaseClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseClient(cc grpc.ClientConnInterface) DatabaseClient {
	return &databaseClient{cc}
}

func (c *databaseClient) CreateUser(ctx context.Context, in *Req.CreateUserReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Database_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) RepeateUser(ctx context.Context, in *Req.RepeateUserReq, opts ...grpc.CallOption) (*Req.RepeateUserRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.RepeateUserRes)
	err := c.cc.Invoke(ctx, Database_RepeateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) DeleteUser(ctx context.Context, in *Req.DeleteUserReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Database_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) UpdateUserPassword(ctx context.Context, in *Req.UpdateUserPasswordReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Database_UpdateUserPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) UpdateUserName(ctx context.Context, in *Req.UpdateUserNameReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Database_UpdateUserName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) CreateMessage(ctx context.Context, in *Req.CreateMessageReq, opts ...grpc.CallOption) (*Req.DefaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.DefaultRes)
	err := c.cc.Invoke(ctx, Database_CreateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) RepeateMessage(ctx context.Context, in *Req.RepeateMessageReq, opts ...grpc.CallOption) (*Req.RepeateMessageRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Req.RepeateMessageRes)
	err := c.cc.Invoke(ctx, Database_RepeateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServer is the server API for Database service.
// All implementations must embed UnimplementedDatabaseServer
// for forward compatibility.
type DatabaseServer interface {
	// User
	CreateUser(context.Context, *Req.CreateUserReq) (*Req.DefaultRes, error)
	RepeateUser(context.Context, *Req.RepeateUserReq) (*Req.RepeateUserRes, error)
	DeleteUser(context.Context, *Req.DeleteUserReq) (*Req.DefaultRes, error)
	UpdateUserPassword(context.Context, *Req.UpdateUserPasswordReq) (*Req.DefaultRes, error)
	UpdateUserName(context.Context, *Req.UpdateUserNameReq) (*Req.DefaultRes, error)
	// Messages
	CreateMessage(context.Context, *Req.CreateMessageReq) (*Req.DefaultRes, error)
	RepeateMessage(context.Context, *Req.RepeateMessageReq) (*Req.RepeateMessageRes, error)
	mustEmbedUnimplementedDatabaseServer()
}

// UnimplementedDatabaseServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDatabaseServer struct{}

func (UnimplementedDatabaseServer) CreateUser(context.Context, *Req.CreateUserReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedDatabaseServer) RepeateUser(context.Context, *Req.RepeateUserReq) (*Req.RepeateUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeateUser not implemented")
}
func (UnimplementedDatabaseServer) DeleteUser(context.Context, *Req.DeleteUserReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedDatabaseServer) UpdateUserPassword(context.Context, *Req.UpdateUserPasswordReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPassword not implemented")
}
func (UnimplementedDatabaseServer) UpdateUserName(context.Context, *Req.UpdateUserNameReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserName not implemented")
}
func (UnimplementedDatabaseServer) CreateMessage(context.Context, *Req.CreateMessageReq) (*Req.DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedDatabaseServer) RepeateMessage(context.Context, *Req.RepeateMessageReq) (*Req.RepeateMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeateMessage not implemented")
}
func (UnimplementedDatabaseServer) mustEmbedUnimplementedDatabaseServer() {}
func (UnimplementedDatabaseServer) testEmbeddedByValue()                  {}

// UnsafeDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServer will
// result in compilation errors.
type UnsafeDatabaseServer interface {
	mustEmbedUnimplementedDatabaseServer()
}

func RegisterDatabaseServer(s grpc.ServiceRegistrar, srv DatabaseServer) {
	// If the following call pancis, it indicates UnimplementedDatabaseServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Database_ServiceDesc, srv)
}

func _Database_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).CreateUser(ctx, req.(*Req.CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_RepeateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.RepeateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).RepeateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_RepeateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).RepeateUser(ctx, req.(*Req.RepeateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).DeleteUser(ctx, req.(*Req.DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.UpdateUserPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_UpdateUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).UpdateUserPassword(ctx, req.(*Req.UpdateUserPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.UpdateUserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_UpdateUserName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).UpdateUserName(ctx, req.(*Req.UpdateUserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.CreateMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).CreateMessage(ctx, req.(*Req.CreateMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_RepeateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req.RepeateMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).RepeateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_RepeateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).RepeateMessage(ctx, req.(*Req.RepeateMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Database_ServiceDesc is the grpc.ServiceDesc for Database service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Database_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "database.Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Database_CreateUser_Handler,
		},
		{
			MethodName: "RepeateUser",
			Handler:    _Database_RepeateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Database_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _Database_UpdateUserPassword_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _Database_UpdateUserName_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _Database_CreateMessage_Handler,
		},
		{
			MethodName: "RepeateMessage",
			Handler:    _Database_RepeateMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Database.proto",
}
